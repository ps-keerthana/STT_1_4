# -*- coding: utf-8 -*-
"""STT_Assign_4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ajH6bixegJ7C04EewOJ2WgQEa7JH4xbX
"""

!pip install pydriller

from pydriller import Repository
import pandas as pd
import csv
import subprocess
import os
import matplotlib.pyplot as plt

# ---------- Helper Functions ----------

# Run histogram diff
def get_hist_diff(repo_path, commit_hash, file_path):
    if file_path is None or file_path == "nan":
        return ""
    try:
        cmd = [
            "git", "-C", repo_path, "diff", "--histogram",
            f"{commit_hash}^", commit_hash, "--", file_path
        ]
        result = subprocess.run(cmd, capture_output=True, text=True, check=True)
        return result.stdout
    except Exception as e:
        return str(e)

# Clean diff: remove metadata lines, normalize whitespace
def clean_diff(diff_str):
    cleaned = []
    for line in str(diff_str).splitlines():
        line = line.strip()
        if not line:
            continue
        # Skip diff metadata lines
        if line.startswith("diff --git") or line.startswith("index ") \
           or line.startswith("---") or line.startswith("+++") \
           or line.startswith("@@"):
            continue
        cleaned.append(line)
    return "\n".join(cleaned)

# Extract commit diffs
def extract_repo_diffs(repo_url, local_path, output_csv, repo_name):
    # Clone repo if not present
    if not os.path.exists(local_path):
        print(f"Cloning {repo_name}...")
        subprocess.run(["git", "clone", repo_url, local_path])

    with open(output_csv, 'w', newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerow([
            "repo_name",
            "old_file_path", "new_file_path",
            "commit_sha", "parent_commit_sha",
            "commit_message",
            "diff_myers", "diff_hist",
            "file_type"
        ])

        for commit in Repository(local_path).traverse_commits():
            parent_commits = commit.parents if commit.parents else ["None"]
            parent_str = ";".join(parent_commits)

            for modified_file in commit.modified_files:
                diff_myers = modified_file.diff if modified_file.diff else ""
                diff_hist = get_hist_diff(local_path, commit.hash, modified_file.new_path)

                # Categorize file type
                file_path = str(modified_file.new_path).lower() if modified_file.new_path else ""
                if "test" in file_path:
                    ftype = "test"
                elif "readme" in file_path:
                    ftype = "readme"
                elif "license" in file_path:
                    ftype = "license"
                else:
                    ftype = "source"

                writer.writerow([
                    repo_name,
                    modified_file.old_path,
                    modified_file.new_path,
                    commit.hash,
                    parent_str,
                    commit.msg,
                    diff_myers,
                    diff_hist,
                    ftype
                ])

# Add discrepancy column
def add_discrepancy(input_csv, output_csv):
    df = pd.read_csv(input_csv)

    df["Discrepancy"] = [
        "No" if clean_diff(row["diff_myers"]) == clean_diff(row["diff_hist"]) else "Yes"
        for _, row in df.iterrows()
    ]

    df.to_csv(output_csv, index=False)
    return df

# Generate stats + plot
def generate_stats_plot(df, repo_name):
    categories = {"source": 0, "test": 0, "readme": 0, "license": 0}

    for _, row in df.iterrows():
        if row["Discrepancy"] == "Yes":
            ftype = row["file_type"]
            if ftype in categories:
                categories[ftype] += 1

    # Print per file type
    print(f"\nDiscrepancy counts per file type ({repo_name}):")
    for k, v in categories.items():
        print(f"{k.capitalize()} files: {v}")

    # Plot
    plt.bar(categories.keys(), categories.values())
    plt.title(f"Diff Mismatches in {repo_name}")
    plt.xlabel("File Type")
    plt.ylabel("Mismatches (#)")
    plt.show()

# ---------- Main ----------

# List of 3 repos with local folder names
repos = [
    {"url": "https://github.com/AI-Hypercomputer/maxtext", "local": "maxtext", "name": "maxtext"},
    {"url": "https://github.com/ai4finance-foundation/elegantrl", "local": "elegantrl", "name": "elegantrl"},
    {"url": "https://github.com/assafelovic/gpt-researcher", "local": "flask", "name": "flask"}
]

for repo in repos:
    raw_csv = f"{repo['name']}_diffs.csv"
    final_csv = f"{repo['name']}_final.csv"

    extract_repo_diffs(repo["url"], repo["local"], raw_csv, repo["name"])
    df_final = add_discrepancy(raw_csv, final_csv)

    # Overall discrepancy counts
    print(f"\nOverall Discrepancy counts ({repo['name']}):")
    print(df_final["Discrepancy"].value_counts())

    # Per file type stats + plot
    generate_stats_plot(df_final, repo["name"])

for repo in repos:
    raw_csv = f"{repo['name']}_diffs.csv"
    final_csv = f"{repo['name']}_final.csv"

    extract_repo_diffs(repo["url"], repo["local"], raw_csv, repo["name"])
    df_final = add_discrepancy(raw_csv, final_csv)

    # Overall Discrepancy counts
    print(f"\nOverall Discrepancy counts ({repo['name']}):")
    print(df_final["Discrepancy"].value_counts())

    # Per file type stats + plot
    generate_stats_plot(df_final, repo["name"])

    # --- Algorithm comparison (inside loop) ---
    mismatch_df = df_final[df_final["Discrepancy"] == "Yes"].copy()
    mismatch_df["len_myers"] = mismatch_df["diff_myers"].apply(lambda x: len(str(x).splitlines()))
    mismatch_df["len_hist"] = mismatch_df["diff_hist"].apply(lambda x: len(str(x).splitlines()))

    avg_myers_len = mismatch_df["len_myers"].mean()
    avg_hist_len = mismatch_df["len_hist"].mean()

    print(f"\nAlgorithm comparison ({repo['name']}):")
    print(f"Average lines in Myers diffs (for mismatches): {avg_myers_len:.2f}")
    print(f"Average lines in Histogram diffs (for mismatches): {avg_hist_len:.2f}")

    if avg_myers_len < avg_hist_len:
        print("Suggestion: Myers diff might be closer to actual code changes.\n")
    elif avg_hist_len < avg_myers_len:
        print("Suggestion: Histogram diff might be closer to actual code changes.\n")
    else:
        print("Both algorithms perform similarly for this repo.\n")